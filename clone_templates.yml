---
- name: Clone templates and transfer to a content library if modified
  hosts: localhost
  gather_facts: no
  vars:
    state_file: "./template_versions.yml"
    destination_vm_folder: 'folder_destination'
    content_library_id: 'content_library_ID'
    templates:
      - name: "template_rhel8"
      - name: "template_windows"

  tasks:
    - name: Initialize state file if it does not exist
      copy:
        content: ""
        dest: "{{ state_file }}"
        force: no

    - name: Load existing versions from state file
      include_vars:
        file: "{{ state_file }}"
        name: "state_data"

    - name: Retrieve current versions of templates
      community.vmware.vmware_guest_info:
        hostname: "{{ vcenter_source_hostname }}"
        datacenter: "{{ datacenter_source }}"
        name: "{{ item.name }}"
        schema: "vsphere"
        properties: ["config.changeVersion", "config.uuid"]
      loop: "{{ templates }}"
      register: current_versions

    - name: Clone templates if modified
      community.vmware.vmware_guest_cross_vc_clone:
        hostname: '{{ vcenter_source_hostname }}'
        destination_vm_name: "clone_{{ item.item.name }}"
        destination_vcenter: '{{ vcenter_destination_hostname }}'
        destination_host: '{{ host_destination }}'
        destination_datastore: '{{ datastore_destination }}'
        destination_vm_folder: '{{ destination_vm_folder }}'
        state: present
      loop: "{{ current_versions.results }}"
      when: "state_data[item.item.name] is undefined or state_data[item.item.name] != item.guest.config.changeVersion"
      register: cloning_results

    - name: Transfer cloned templates to the content library
      vmware.vmware_rest.vcenter_vm_template_library_items.create:
        content_library_id: "{{ content_library_id }}"
        source_vm: "{{ item.invocation.module_args.destination_vm_name }}"
        name: '{{ item.invocation.module_args.destination_vm_name }}_template'
      loop: "{{ cloning_results.results }}"
      when: item.changed
      delegate_to: localhost

    - name: Save the new changeVersion to the state file
      lineinfile:
        path: "{{ state_file }}"
        line: "{{ item.item.name }}: {{ item.guest.config.changeVersion }}"
        create: yes
      loop: "{{ current_versions.results }}"
      when: "state_data[item.item.name] is undefined or state_data[item.item.name] != item.guest.config.changeVersion"

    - name: Display cloning and transfer results
      debug:
        msg: "The template {{ item.item.item.name }} was cloned to {{ item.invocation.module_args.destination_vm_name }} and transferred to the library with the new changeVersion {{ item.guest.config.changeVersion }}"
      loop: "{{ cloning_results.results }}"
      when: item.changed
